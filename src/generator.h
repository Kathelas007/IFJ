/*
*********************************************
    Projekt:    IFJ 2019
    Tým:        086
    Varianta:   II
    Členové:    Antonín Hubík    (xhubik03)
                Daša Nosková     (xnosko05)
                David Holas      (xholas11)
                Kateřina Mušková (xmusko00)
    
    Soubor:     generator.h
    Autor:      Kateřina Mušková (xmusko00)
    Úpravy:     David Holas      (xholas11)
*********************************************
*/

#ifndef GENERATOR_H
#define GENERATOR_H

#include "symtable.h"
#include "token.h"
#include "dynamic_string.h"


enum func_target {
    FT_TOP,     // Variable on top of data stack
    FT_BELOW    // Variable directly below top of data stack (second from top)
};

enum new_location {
    CL_FNC_BEG,
    CL_FNC_END,
    CL_IF_WHILE_BEG,
    CL_IF_WHILE_END,
};

typedef struct code_location {
    int main;
    int if_while;
} code_location;

// *************** NONEXPRESSIONS  *********************************

void generator_init();

void generator_destroy();

void gen_begin();

void gen_end();

/// ------------ variable definition -----

/// Generates variable definition data stack
void gen_def_var(string*);

/// ------------ assigment ---------------

/// Generates assignment of variable to data stack
void gen_assign(string*, int);

void gen_non_assign();

/// ------------ if while ---------------

/// Genereation of if
void gen_if_beg();

void gen_else();

void gen_if_end();

/// Genereation of while
void gen_while_beg();

void gen_while_cond();

void gen_while_end();

/// ------------ fnc  ------------------

void gen_fnc_def_beg(string*, string*[], unsigned int);

// v return_tail je eval_expr, takze by vysledek mel jako prvni na stacku nahore
void gen_return(int);

void gen_fnc_def_end();

void gen_const_param(data_type , string*);

void gen_id_param(string* , int);

void gen_fnc_call(string*);

/// ------------ build-in fnc ---------

void gen_param_ID_check(data_type);

void gen_print();

void gen_inputs();

void gen_inputi();

void gen_inputf();

void gen_len();

void gen_substr();

void gen_ord();

void gen_chr();

//*************** EXPRESSIONS *********************************

/// Generates push of T_ID to data stack
void gen_push_id(string *, int );

/// Generates push of constant to data stack 
void gen_push_constant(data_type, string *);

/// Generates stack operation with given lexeme
void gen_stack_operation(enum lexeme);

/// Generates concatenation of top 2 variables (strings) on data stack
/// Does not generate type check
void gen_concat();

/// Generates conversion of targeted variable on data stack from int to float
void gen_conversion(enum func_target);

/// Generates conversion of variable on top of data stack from any type to bool
void gen_bool_conversion();

/// Generates conversion of top 2 variables on data stack to strings containing their types
void gen_types();

/// Generates literally nothing
#define gen_none()

/// Generazes EXIT command with given ERR_FLAG
void gen_exit(int);

/// Generates dynamic check if value on top of the stack is zero
void gen_zero_check();

/// Generates dynamic check if given id is defined (typically before PUSHS)
void gen_isdef_check(string *id_name, int is_global);


/// Functions ONLY for check_type macro
/// They allow macro to access generator's private functons
void gen_priv_check_type_begin(char *, enum func_target, string **, string **);
void gen_priv_check_type_else(string *, string *);
void gen_priv_check_type_end(string *, string *);



/// Generates dynamic type check
///  
/// string literal 'type':
///     Type to check against
///
/// enum func_target 'target':
///     Targets either variable on top of data stack or the one below it
///
/// generator function 'true_func':
///     IFJcode19 generated by this function (passed with its arguments) will be run by interpreter if type check succeeds
///
/// generator function 'false_func':
///     IFJcode19 generated by this function (passed with its arguments) will be run by interpreter if type check fails
///
/// Should not be used directly, but by specific type versions below
#define check_type(type, target, true_func, false_func) do { \
    string *else_label = NULL; \
    string *end_label = NULL; \
    \
    gen_priv_check_type_begin(type, target, &else_label, &end_label); \
    \
    true_func; \
    \
    gen_priv_check_type_else(else_label, end_label); \
    \
    false_func; \
    \
    gen_priv_check_type_end(else_label, end_label); \
    \
} while(0)

/// Specific type versions of check_type macro

#define gen_check_int(target, true_func, false_func) \
    check_type("int", target, true_func, false_func)

#define gen_check_float(target, true_func, false_func) \
    check_type("float", target, true_func, false_func)

#define gen_check_string(target, true_func, false_func) \
    check_type("string", target, true_func, false_func)

#define gen_check_bool(target, true_func, false_func) \
    check_type("bool", target, true_func, false_func)


#endif //GENERATOR_H
